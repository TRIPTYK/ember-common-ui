{"version":3,"file":"mask-utils.js","sources":["../../src/utils/mask-utils.ts"],"sourcesContent":["interface CompiledMasks {\n  mask: string,\n  definition?: Record<string, string>, \n  startsWith: string,\n  default: boolean,\n  lazy?: boolean,\n}\n\n// feel free to complete this, this is not exhaustive\nexport interface DynamicMasked {\n  rawInputValue: string,\n  compiledMasks: CompiledMasks[],\n}\n\nexport const maskSpecialCharDefinition = {\n  '#': /[a-zA-Z]/,\n  '&': /[0-9]/,\n  '$': /[a-zA-Z0-9]/,\n}\n\nexport function getMaskForPrefixOrDefault(_appended: string, dynamicMasked: DynamicMasked) {\n  const mask =  dynamicMasked.compiledMasks.find(mask => {\n    return dynamicMasked.rawInputValue.slice(0, 2).toUpperCase() === mask.startsWith;\n  })\n\n  if (!mask) {\n    return dynamicMasked.compiledMasks.find(mask => {\n      return mask.default === true;\n    })\n  }\n  return mask;\n}\n"],"names":["maskSpecialCharDefinition","getMaskForPrefixOrDefault","_appended","dynamicMasked","mask","compiledMasks","find","rawInputValue","slice","toUpperCase","startsWith","default"],"mappings":"AAQA;;AAMO,MAAMA,yBAAyB,GAAG;AACvC,EAAA,GAAG,EAAE,UAAU;AACf,EAAA,GAAG,EAAE,OAAO;AACZ,EAAA,GAAG,EAAE,aAAA;AACP,EAAC;AAEM,SAASC,yBAAyBA,CAACC,SAAiB,EAAEC,aAA4B,EAAE;EACzF,MAAMC,IAAI,GAAID,aAAa,CAACE,aAAa,CAACC,IAAI,CAACF,IAAI,IAAI;AACrD,IAAA,OAAOD,aAAa,CAACI,aAAa,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,WAAW,EAAE,KAAKL,IAAI,CAACM,UAAU,CAAA;AAClF,GAAC,CAAC,CAAA;EAEF,IAAI,CAACN,IAAI,EAAE;AACT,IAAA,OAAOD,aAAa,CAACE,aAAa,CAACC,IAAI,CAACF,IAAI,IAAI;AAC9C,MAAA,OAAOA,IAAI,CAACO,OAAO,KAAK,IAAI,CAAA;AAC9B,KAAC,CAAC,CAAA;AACJ,GAAA;AACA,EAAA,OAAOP,IAAI,CAAA;AACb;;;;"}