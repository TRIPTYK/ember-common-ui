{"version":3,"file":"tpk-select.js","sources":["../../src/components/tpk-select.gts"],"sourcesContent":["/* eslint-disable no-fallthrough */\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport type { ComponentLike, WithBoundArgs } from '@glint/template';\nimport { hash } from '@ember/helper';\nimport PowerSelect, { type Select } from 'ember-power-select/components/power-select';\nimport PowerSelectMultiple from 'ember-power-select/components/power-select-multiple';\nimport TpkSelectOption from './tpk-select/option.gts';\n\nexport { type Select } from 'ember-power-select/components/power-select';\n\nexport interface TpkSelectSignature {\n  Args: {\n    multiple?: boolean;\n    options: unknown[];\n    selected?: unknown;\n    label: string;\n    placeholder?: string;\n    renderInPlace?: boolean;\n    labelClass?: string;\n    allowClear?: boolean;\n    disabled?: boolean;\n    initiallyOpened?: boolean;\n    loadingMessage?: string;\n    labelComponent?: string | ComponentLike<unknown>;\n    selectedItemComponent?: string | ComponentLike<unknown>;\n    placeholderComponent?: string | ComponentLike<unknown>;\n    searchEnabled?: boolean;\n    searchField?: string;\n    searchPlaceholder?: string;\n    searchMessage?: string;\n    noMatchesMessage?: string;\n    search?: ((term: string, select: Select) => readonly unknown[] | Promise<readonly unknown[]>) | undefined\n    onChange: (selection: unknown, select: Select, event?: Event) => void;\n    onKeyDown?: ((select: Select, e: KeyboardEvent) => boolean | undefined) | undefined\n  };\n  Blocks: {\n    default: [\n      {\n        Option: WithBoundArgs<\n          typeof TpkSelectOption,\n          | 'option'\n        >;\n      },\n    ];\n  };\n}\n\nexport default class TpkSelectComponent extends Component<TpkSelectSignature> {\n  constructor(owner: unknown, args: TpkSelectSignature['Args']) {\n    super(owner, args);\n\n    assert(\n      'Please provide an @options array to component',\n      args.options !== undefined,\n    );\n    assert(\n      'Please provide an @onChange function',\n      typeof args.onChange === 'function',\n    );\n  }\n  get renderInPlace() {\n    return this.args.renderInPlace === false ? false : true;\n  }\n\n  <template>\n    {{#if @multiple}}\n      <PowerSelectMultiple\n        @labelText={{@label}}\n        @options={{@options}}\n        @selected={{@selected}}\n        @allowClear={{@allowClear}}\n        @onChange={{@onChange}}\n        @placeholder={{@placeholder}}\n        @labelClass={{@labelClass}}\n        @renderInPlace={{this.renderInPlace}}\n        @labelComponent={{@labelComponent}}\n        @selectedItemComponent={{@selectedItemComponent}}\n        @placeholderComponent={{@placeholderComponent}}\n        @searchEnabled={{@searchEnabled}}\n        @searchField={{@searchField}}\n        @searchPlaceholder={{@searchPlaceholder}}\n        @searchMessage={{@searchMessage}}\n        @search={{@search}}\n        @onKeydown={{@onKeyDown}}\n        @disabled={{@disabled}}\n        @dropdownClass='tpk-select-dropdown'\n        @triggerClass='tpk-select-trigger'\n        @initiallyOpened={{@initiallyOpened}}\n        @loadingMessage={{@loadingMessage}}\n        @noMatchesMessage={{@noMatchesMessage}}\n      as |option|>\n        {{yield\n          (hash\n            Option=(component\n              TpkSelectOption\n              option=option\n            )\n          )\n        }}\n      </PowerSelectMultiple>\n    {{else}}\n      <PowerSelect\n        @labelText={{@label}}\n        @options={{@options}}\n        @selected={{@selected}}\n        @placeholder={{@placeholder}}\n        @allowClear={{@allowClear}}\n        @onChange={{@onChange}}\n        @labelClass={{@labelClass}}\n        @renderInPlace={{this.renderInPlace}}\n        @labelComponent={{@labelComponent}}\n        @selectedItemComponent={{@selectedItemComponent}}\n        @placeholderComponent={{@placeholderComponent}}\n        @searchEnabled={{@searchEnabled}}\n        @searchField={{@searchField}}\n        @searchPlaceholder={{@searchPlaceholder}}\n        @searchMessage={{@searchMessage}}\n        @search={{@search}}\n        @onKeydown={{@onKeyDown}}\n        @disabled={{@disabled}}\n        @dropdownClass='tpk-select-dropdown'\n        @triggerClass='tpk-select-trigger'\n        @initiallyOpened={{@initiallyOpened}}\n        @loadingMessage={{@loadingMessage}}\n        @noMatchesMessage={{@noMatchesMessage}}\n      as |option|>\n        {{yield\n          (hash\n            Option=(component\n              TpkSelectOption\n              option=option\n            )\n          )\n        }}\n      </PowerSelect>\n    {{/if}}\n  </template>\n}\n"],"names":["TpkSelectComponent","Component","constructor","owner","args","assert","options","undefined","onChange","renderInPlace","_TpkSelectComponent","setComponentTemplate","precompileTemplate","strictMode","scope","PowerSelectMultiple","hash","TpkSelectOption","PowerSelect"],"mappings":";;;;;;;;;;;AAgDe,MAAMA,2BAA2BC,SAAU,CAAA;AACxDC,EAAAA,WAAAA,CAAYC,KAAc,EAAEC,IAAgC,EAAE;AAC5D,IAAA,KAAK,CAACD,KAAO,EAAAC,IAAA,CAAA,CAAA;IAEbC,MACE,CAAA,+CAAA,EACAD,IAAK,CAAAE,OAAO,KAAKC,SAAA,CAAA,CAAA;IAEnBF,MAAA,CACE,sCACA,EAAA,OAAOD,IAAK,CAAAI,QAAQ,KAAK,UAAA,CAAA,CAAA;AAE7B,GAAA;EACA,IAAIC,aAAgBA,GAAA;IAClB,OAAO,IAAI,CAACL,IAAI,CAACK,aAAa,KAAK,QAAQ,KAAQ,GAAA,IAAA,CAAA;AACrD,GAAA;AA2EF,CAAA;AAAAC,mBAAA,GA1FqBV;AAiBnBW,oBAAA,CAAAC,kBAAA,CAwEA,wyDAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAC,mBAAA;IAAAC,IAAA;IAAAC,eAAA;AAAAC,IAAAA,WAAAA;AAAA,GAAA,CAAA;AAAU,CAAA,CAAA,EAAAR,mBAAA,CAAA;;;;"}